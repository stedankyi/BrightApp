@page "/"
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IBleetService BleetService
@implements IAsyncDisposable

<PageTitle>Blitter</PageTitle>



@if(BleetService.Bleets == null || BleetService.Bleets.Count == 0)
{
    <center>
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </center>
}
else
{
    <div>
        <div>
            <MudContainer Class="mt-8 mx-auto px-8" MaxWidth="MaxWidth.False">
                
                @if (showingNewBleetDIalog)
                {
                    <NewBleetComponent Bleet="bleet"
                               OnCancel="() => showingNewBleetDIalog = false" />
                }
                <MudGrid Spacing="1">
                    <MudItem>
                        <MudButton OnClick="@(() => showingNewBleetDIalog = !showingNewBleetDIalog)" Variant="Variant.Filled" Color="Color.Info" Style="color: white; width: 200px; height: 150px;">New Bleet</MudButton>
                    </MudItem>
                    @foreach (var bleet in BleetService.Bleets)
                    {
                        <MudItem>
                            <MudCard Outlined="true">
                                <MudCardContent>
                                    <MudText Typo="Typo.h5">@(Regex.Replace(bleet.BleetTitle, "(?<=^.{26}).*", "..."))</MudText>
                                    <MudText Typo="Typo.body2">@(Regex.Replace(bleet.BleetText, "(?<=^.{32}).*", "..."))</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => OnExpandButtonClicked(bleet))">Expand</MudButton>
                                    <MudSpacer />
                                    <MudIconButton Icon="@Icons.Filled.Favorite" Color="Color.Info" />
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudContainer>
        </div>
    </div>
}




@code{
    HubConnection? hubConnection;
    bool showingNewBleetDIalog = false;
    Bleet bleet = new Bleet();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/bleethub"))
        .Build();

        hubConnection.On("ReceiveBleets", async () => { 
            await BleetService.GetBleets();
            StateHasChanged();
        } );

        await BleetService.GetBleets();

        await hubConnection.StartAsync();
    }

    private async void OnExpandButtonClicked(Bleet bleet)
    {
        bool? result = await DialogService.ShowMessageBox(
            bleet.BleetTitle,
            (MarkupString)bleet.BleetText,
            cancelText: "Close");
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}